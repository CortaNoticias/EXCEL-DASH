// Actualizar las URLs exactas verificadas en GitHub
const JSON_URLS = {
  "2020":
    "https://raw.githubusercontent.com/CortaNoticias/EXCEL-DASH/main/csv/Multas%20Junaeb%20-%20Base%20de%20datos%20(TPA)%202020.json",
  "2021":
    "https://raw.githubusercontent.com/CortaNoticias/EXCEL-DASH/main/csv/Multas%20Junaeb%20-%20Base%20de%20datos%20(TPA)%202021.json",
  "2022":
    "https://raw.githubusercontent.com/CortaNoticias/EXCEL-DASH/main/csv/Multas%20Junaeb%20-%20Base%20de%20datos%20(TPA)%202022.json",
  "2023":
    "https://raw.githubusercontent.com/CortaNoticias/EXCEL-DASH/main/csv/Multas%20Junaeb%20-%20Base%20de%20datos%20(TPA)%202023.json",
}

// Mejorar la funci√≥n de carga con mejor manejo de errores y logging
export async function loadJSONData(year?: string) {
  try {
    console.log("=== INICIANDO CARGA DE DATOS REALES DESDE GITHUB ===")
    console.log("Repositorio: CortaNoticias/EXCEL-DASH")
    console.log("URLs disponibles:", Object.keys(JSON_URLS))

    if (year && JSON_URLS[year as keyof typeof JSON_URLS]) {
      // Cargar un a√±o espec√≠fico
      console.log(`Cargando a√±o espec√≠fico: ${year}`)
      return await loadSingleYear(year)
    } else {
      // Cargar todos los a√±os
      console.log("Cargando todos los a√±os disponibles...")
      return await loadAllYears()
    }
  } catch (error) {
    console.error("Error principal al procesar datos JSON:", error)
    console.log("‚ö†Ô∏è Fallback: Usando datos de ejemplo realistas...")
    return generateRealisticMockData()
  }
}

async function loadSingleYear(year: string) {
  const url = JSON_URLS[year as keyof typeof JSON_URLS]
  console.log(`üì• Cargando ${year} desde: ${url}`)

  try {
    const response = await fetch(url, {
      method: "GET",
      headers: {
        Accept: "application/json, text/plain, */*",
        "Cache-Control": "no-cache",
        "User-Agent": "Mozilla/5.0 (compatible; JunaebDashboard/1.0)",
      },
      mode: "cors",
    })

    console.log(`üìä Respuesta ${year}:`, {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      url: response.url,
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText} para ${year}`)
    }

    const rawText = await response.text()
    console.log(`üìÑ Contenido ${year}:`, {
      length: rawText.length,
      preview: rawText.substring(0, 100) + "...",
      startsWithBrace: rawText.trim().startsWith("{") || rawText.trim().startsWith("["),
    })

    if (!rawText.trim()) {
      throw new Error(`Respuesta vac√≠a para ${year}`)
    }

    let data
    try {
      data = JSON.parse(rawText)
      console.log(`‚úÖ JSON parseado exitosamente para ${year}`)
    } catch (parseError) {
      console.error(`‚ùå Error al parsear JSON para ${year}:`, parseError)
      console.log("Contenido problem√°tico:", rawText.substring(0, 500))
      throw new Error(`Formato JSON inv√°lido para ${year}`)
    }

    const normalizedData = normalizeJSONData(data)
    console.log(`üîÑ ${year}: ${normalizedData.length} registros procesados y normalizados`)

    // Verificar calidad de los datos
    const sampleRecord = normalizedData[0]
    if (sampleRecord) {
      console.log(`üìã Muestra de datos ${year}:`, {
        empresa: sampleRecord.empresa,
        monto: sampleRecord.montoNotificado || "No encontrado",
        fecha: sampleRecord.fecha,
        keys: Object.keys(sampleRecord).slice(0, 5),
      })
    }

    return {
      sheetNames: [year],
      data: { [year]: normalizedData },
    }
  } catch (error) {
    console.error(`‚ùå Error espec√≠fico al cargar ${year}:`, error)
    throw error
  }
}

async function loadAllYears() {
  console.log("üîÑ Iniciando carga masiva de todos los a√±os...")
  const allData: Record<string, any[]> = {}
  const loadedYears: string[] = []
  const errors: string[] = []

  // Cargar a√±os en paralelo para mejor rendimiento
  const loadPromises = Object.entries(JSON_URLS).map(async ([yearKey, url]) => {
    try {
      console.log(`\n--- üì• Procesando ${yearKey} ---`)
      const result = await loadSingleYear(yearKey)
      return { yearKey, data: result.data[yearKey], success: true }
    } catch (error) {
      const errorMsg = `${yearKey}: ${error instanceof Error ? error.message : "Error desconocido"}`
      console.error(`‚ùå Error en ${yearKey}:`, error)
      return { yearKey, error: errorMsg, success: false }
    }
  })

  const results = await Promise.allSettled(loadPromises)

  results.forEach((result) => {
    if (result.status === "fulfilled") {
      const { yearKey, data, success, error } = result.value
      if (success && data) {
        allData[yearKey] = data
        loadedYears.push(yearKey)
        console.log(`‚úÖ ${yearKey} cargado exitosamente (${data.length} registros)`)
      } else if (error) {
        errors.push(error)
      }
    } else {
      errors.push(`Error de promesa: ${result.reason}`)
    }
  })

  console.log("\n=== üìä RESUMEN FINAL DE CARGA ===")
  console.log(
    `‚úÖ A√±os cargados exitosamente: ${loadedYears.join(", ")} (${loadedYears.length}/${Object.keys(JSON_URLS).length})`,
  )
  console.log(`‚ùå Errores encontrados: ${errors.length}`)
  if (errors.length > 0) {
    console.log("Detalles de errores:", errors)
  }

  if (loadedYears.length === 0) {
    console.log("‚ö†Ô∏è No se pudo cargar ning√∫n a√±o real, generando datos de ejemplo...")
    return generateRealisticMockData()
  }

  // Calcular estad√≠sticas totales
  const totalRecords = Object.values(allData).reduce((sum, yearData) => sum + yearData.length, 0)
  console.log(`üìà Total de registros cargados: ${totalRecords}`)

  return {
    sheetNames: loadedYears.sort(),
    data: allData,
  }
}

// Mejorar la normalizaci√≥n de datos con mejor detecci√≥n de campos
function normalizeJSONData(data: any): any[] {
  console.log("üîÑ Iniciando normalizaci√≥n de datos...")
  console.log("Tipo de datos recibidos:", typeof data, "Es array:", Array.isArray(data))

  // Si es un array, procesarlo directamente
  if (Array.isArray(data)) {
    console.log(`üìä Procesando array directo con ${data.length} elementos`)
    const normalized = data.map(normalizeRow).filter((row) => row !== null)
    console.log(`‚úÖ Normalizados ${normalized.length} registros v√°lidos`)
    return normalized
  }

  // Si es un objeto, buscar arrays dentro
  if (typeof data === "object" && data !== null) {
    console.log("üîç Explorando objeto para encontrar datos tabulares...")

    // Buscar propiedades que contengan arrays
    for (const [key, value] of Object.entries(data)) {
      if (Array.isArray(value) && value.length > 0) {
        console.log(`üìã Encontrado array en propiedad '${key}' con ${value.length} elementos`)
        const normalized = value.map(normalizeRow).filter((row) => row !== null)
        console.log(`‚úÖ Normalizados ${normalized.length} registros v√°lidos desde '${key}'`)
        return normalized
      }
    }

    // Buscar propiedades espec√≠ficas de JUNAEB
    const possibleDataKeys = ["data", "records", "items", "multas", "registros", "rows", "sheet", "worksheet"]
    for (const key of possibleDataKeys) {
      if (data[key] && Array.isArray(data[key])) {
        console.log(`üìã Encontrados datos en propiedad espec√≠fica '${key}'`)
        const normalized = data[key].map(normalizeRow).filter((row) => row !== null)
        console.log(`‚úÖ Normalizados ${normalized.length} registros v√°lidos`)
        return normalized
      }
    }

    // Si no hay arrays, intentar convertir el objeto en un array
    console.log("üîÑ Convirtiendo objeto √∫nico a array")
    const normalized = normalizeRow(data)
    return normalized ? [normalized] : []
  }

  console.warn("‚ö†Ô∏è Datos no reconocidos, retornando array vac√≠o")
  return []
}

function normalizeRow(row: any): any {
  if (typeof row !== "object" || row === null) {
    return null
  }

  const newRow: Record<string, any> = {}
  let hasValidData = false

  // Procesar cada campo del JSON con mejor detecci√≥n
  Object.entries(row).forEach(([key, value]) => {
    if (value !== null && value !== undefined && value !== "") {
      hasValidData = true
    }

    const normalizedKey = typeof key === "string" ? key.toLowerCase().trim() : String(key).toLowerCase().trim()

    // Detectar empresa/proveedor/contratista con m√°s variaciones
    if (
      normalizedKey.includes("empresa") ||
      normalizedKey.includes("proveedor") ||
      normalizedKey.includes("contratista") ||
      normalizedKey.includes("raz√≥n social") ||
      normalizedKey.includes("razon social") ||
      normalizedKey.includes("nombre") ||
      normalizedKey.includes("contratante") ||
      normalizedKey.includes("supplier") ||
      normalizedKey.includes("contractor") ||
      normalizedKey.includes("company") ||
      normalizedKey.includes("firm")
    ) {
      newRow["empresa"] = value
    }
    // Detectar instituci√≥n
    else if (
      normalizedKey.includes("institucion") ||
      normalizedKey.includes("instituci√≥n") ||
      normalizedKey.includes("junaeb") ||
      normalizedKey.includes("organismo") ||
      normalizedKey.includes("institution") ||
      normalizedKey.includes("entity")
    ) {
      newRow["institucion"] = value || "JUNAEB"
    }
    // Detectar fechas con m√°s formatos
    else if (
      normalizedKey.includes("fecha") ||
      normalizedKey.includes("date") ||
      normalizedKey.includes("a√±o") ||
      normalizedKey.includes("ano") ||
      normalizedKey.includes("year") ||
      normalizedKey.includes("time") ||
      normalizedKey.includes("periodo")
    ) {
      newRow["fecha"] = value
    }
    // Detectar estado con m√°s variaciones
    else if (
      normalizedKey.includes("estado") ||
      normalizedKey.includes("situacion") ||
      normalizedKey.includes("status") ||
      normalizedKey.includes("condicion") ||
      normalizedKey.includes("state") ||
      normalizedKey.includes("condition") ||
      normalizedKey.includes("stage")
    ) {
      newRow["estado"] = value
    }
    // Detectar tipo con m√°s categor√≠as
    else if (
      normalizedKey.includes("tipo") ||
      normalizedKey.includes("categoria") ||
      normalizedKey.includes("clasificacion") ||
      normalizedKey.includes("motivo") ||
      normalizedKey.includes("type") ||
      normalizedKey.includes("category") ||
      normalizedKey.includes("class") ||
      normalizedKey.includes("kind")
    ) {
      newRow["tipo"] = value
    }
    // Detectar RUT con m√°s formatos
    else if (
      normalizedKey.includes("rut") ||
      normalizedKey.includes("identificacion") ||
      normalizedKey.includes("cedula") ||
      normalizedKey.includes("tax_id") ||
      normalizedKey.includes("id") ||
      normalizedKey.includes("dni")
    ) {
      newRow["rut"] = value
    }
    // Detectar regi√≥n con m√°s variaciones
    else if (
      normalizedKey.includes("region") ||
      normalizedKey.includes("regi√≥n") ||
      normalizedKey.includes("area") ||
      normalizedKey.includes("zone") ||
      normalizedKey.includes("territory")
    ) {
      newRow["region"] = value
    }

    // Mantener la columna original
    newRow[key] = value
  })

  return hasValidData ? newRow : null
}

// Actualizar datos de ejemplo con estructura m√°s realista
function generateRealisticMockData() {
  console.log("üé≠ Generando datos de ejemplo realistas para JUNAEB...")
  console.log("‚ö†Ô∏è Nota: Estos son datos simulados para demostraci√≥n")

  const empresas = [
    "Alimentos del Sur S.A.",
    "Servicios Escolares Ltda.",
    "Distribuidora Central",
    "Cocina Express",
    "Alimentaci√≥n Escolar S.A.",
    "Proveedores Unidos",
    "Catering Escolar",
    "Nutrici√≥n Infantil S.A.",
    "Servicios Alimentarios del Norte",
    "Comidas Escolares Premium",
    "Distribuidora Educacional",
    "Alimentos Frescos S.A.",
    "Cocinas Industriales Chile",
    "Alimentaci√≥n Saludable Ltda.",
    "Servicios Nutricionales",
  ]

  const estados = ["Notificado", "Ejecutado", "En Proceso", "Pendiente", "Resuelto", "Anulado", "Vigente"]
  const tipos = [
    "Multa por atraso en entrega",
    "Multa por calidad deficiente",
    "Multa por incumplimiento contractual",
    "Multa administrativa",
    "Multa por higiene",
    "Multa por documentaci√≥n",
    "Multa por temperatura",
    "Multa por cantidad",
    "Multa por especificaciones t√©cnicas",
  ]

  const regiones = [
    "Regi√≥n Metropolitana",
    "Valpara√≠so",
    "Biob√≠o",
    "Araucan√≠a",
    "Los Lagos",
    "Maule",
    "O'Higgins",
    "Antofagasta",
    "Coquimbo",
    "Tarapac√°",
    "Atacama",
    "Ays√©n",
    "Magallanes",
    "Arica y Parinacota",
    "Los R√≠os",
  ]

  const mockData: Record<string, any[]> = {}

  Object.keys(JSON_URLS).forEach((year) => {
    const yearNum = Number.parseInt(year)
    const recordCount = 40 + Math.floor(Math.random() * 30) // 40-70 registros por a√±o

    mockData[year] = Array.from({ length: recordCount }, (_, i) => {
      const montoNotificado = Math.floor(Math.random() * 20000000) + 500000 // 500K - 20.5M
      const porcentajeEjecucion = Math.random() * 0.9 + 0.05 // 5% - 95%
      const montoEjecutado = Math.floor(montoNotificado * porcentajeEjecucion)

      return {
        // Identificadores
        id: `MOCK-${year}-${String(i + 1).padStart(3, "0")}`,
        numeroMulta: `M-${year}-${String(i + 1).padStart(4, "0")}`,

        // Datos principales
        empresa: empresas[Math.floor(Math.random() * empresas.length)],
        institucion: "JUNAEB",
        rut: `${Math.floor(Math.random() * 30000000) + 5000000}-${Math.floor(Math.random() * 9)}`,

        // Fechas
        fecha: `${year}-${String(Math.floor(Math.random() * 12) + 1).padStart(2, "0")}-${String(Math.floor(Math.random() * 28) + 1).padStart(2, "0")}`,
        fechaNotificacion: `${year}-${String(Math.floor(Math.random() * 12) + 1).padStart(2, "0")}-${String(Math.floor(Math.random() * 28) + 1).padStart(2, "0")}`,
        fechaVencimiento: `${year}-${String(Math.floor(Math.random() * 12) + 1).padStart(2, "0")}-${String(Math.floor(Math.random() * 28) + 1).padStart(2, "0")}`,

        // Clasificaci√≥n
        estado: estados[Math.floor(Math.random() * estados.length)],
        tipo: tipos[Math.floor(Math.random() * tipos.length)],
        region: regiones[Math.floor(Math.random() * regiones.length)],

        // Montos
        montoNotificado,
        montoEjecutado,
        diferencia: montoNotificado - montoEjecutado,
        porcentajeEjecucion: (porcentajeEjecucion * 100).toFixed(2),

        // Datos temporales
        a√±o: yearNum,
        trimestre: Math.floor(Math.random() * 4) + 1,
        mes: Math.floor(Math.random() * 12) + 1,

        // Campos adicionales
        observaciones:
          i % 4 === 0 ? "Multa recurrente" : i % 7 === 0 ? "Caso especial" : i % 10 === 0 ? "Requiere seguimiento" : "",
        prioridad: ["Alta", "Media", "Baja"][Math.floor(Math.random() * 3)],
        responsable: ["√Årea T√©cnica", "√Årea Legal", "√Årea Administrativa"][Math.floor(Math.random() * 3)],
      }
    })
  })

  console.log(`üé≠ Datos de ejemplo generados para a√±os: ${Object.keys(mockData).join(", ")}`)
  console.log(`üìä Total de registros simulados: ${Object.values(mockData).reduce((sum, arr) => sum + arr.length, 0)}`)

  return {
    sheetNames: Object.keys(JSON_URLS).sort(),
    data: mockData,
  }
}

export function getAvailableYears(): string[] {
  return Object.keys(JSON_URLS).sort()
}

export function getDataSourceInfo() {
  return {
    baseUrl: "https://github.com/CortaNoticias/EXCEL-DASH/tree/main/csv",
    files: Object.entries(JSON_URLS).map(([year, url]) => ({
      year,
      url,
      filename: url.split("/").pop(),
    })),
    totalYears: Object.keys(JSON_URLS).length,
  }
}
